// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: person.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO PERSON (first_name, last_name)
VALUES ($1, $2)
RETURNING id, first_name, last_name
`

type CreatePersonParams struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, createPerson, arg.FirstName, arg.LastName)
	var i Person
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const getAllPerson = `-- name: GetAllPerson :many
SELECT id, first_name, last_name
FROM PERSON
`

func (q *Queries) GetAllPerson(ctx context.Context) ([]Person, error) {
	rows, err := q.db.Query(ctx, getAllPerson)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.FirstName, &i.LastName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerson = `-- name: GetPerson :one
SELECT id, first_name, last_name
FROM PERSON
WHERE ID = $1
`

func (q *Queries) GetPerson(ctx context.Context, id pgtype.UUID) (Person, error) {
	row := q.db.QueryRow(ctx, getPerson, id)
	var i Person
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}
